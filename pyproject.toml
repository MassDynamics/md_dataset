# see documentation, e.g.
# - https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata
# - https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
# - https://www.python.org/dev/peps/pep-0621/

[build-system]
requires = ["setuptools>=64.0.0", "setuptools-scm", "wheel"]
build-backend = "setuptools.build_meta"

[project]
authors = [
    { name = "Brendan Spinks", email = "brendan@massdynamics.com" }
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
  "boto3 ~= 1.35.54",
  "pandas ~= 2.2.3",
  "prefect ~= 3.1.15",
  "prefect-aws ~= 0.5.3",
  "pyarrow",
  "pydantic ~= 2.10.4",
  "md_form @ git+https://github.com/MassDynamics/md_form.git"
]
description = "Common package for integrating with Mass Dynamics workflows"
keywords = [""]
license = {file = "LICENSE"}
name = "md_dataset"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.11"
version = "0.5.18"

[project.optional-dependencies]
r = [
  "rpy2 ~= 3.5.17",
]
dev = [
    "build",  # build is not only used in publishing (below), but also in the template's test suite
    "boto3-type-annotations",
    "bump-my-version",
    "coverage [toml]",
    "pytest",
    "pytest-mock",
    "pytest-cov",
    "pytest-xdist",
    "prefect-docker ~= 0.6.2",
    "ruff ~= 0.9.4",
    "sphinx",
    "sphinx_rtd_theme",
    "sphinx-autoapi",
    "tox",
    "myst_parser",
    "rpy2 ~= 3.5.17",
]
docs = [
    "sphinx",
    "sphinx_rtd_theme",
    "sphinx-autoapi",
    "myst_parser",
]
publishing = [
    "build",
    "twine",
    "wheel",
]

[project.scripts]
md-dataset-deploy = "md_dataset.deploy:main"

[project.urls]
Repository = "https://github.com/MassDynamics/md_dataset"
Issues = "https://github.com/MassDynamics/md_dataset/issues"

[tool.pytest.ini_options]
testpaths = ["tests"]


[tool.coverage.run]
branch = true
source = ["src/md_dataset"]
command_line = "-m pytest"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py311,py312
skip_missing_interpreters = true
[testenv]
commands = pytest
extras = dev
"""

[tool.ruff]
line-length = 120
output-format = "concise"
extend-exclude = ["docs"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-decorators = ["pydantic.validate_call", "attrs.define"]
runtime-evaluated-base-classes = ["pydantic.BaseModel", "sqlalchemy.orm.DeclarativeBase"]

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Enable Pyflakes `E` and `F` codes by default.
select = ["ALL"]
ignore = [
    "ANN204", # Missing return type annotation for special (dunder) method
    "FBT",    # Using boolean function arguments
    "TD",     # TODOs
    "FIX001", # Resolve FIXMEs
    "FIX002", # Resolve TODOs
    "B028",   # No explicit `stacklevel` keyword argument found in warning
    # No docstrings required in the following cases
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "N805"
]
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
# Tests can ignore a few extra rules
"tests/**.py" = [
    "ANN201", # Missing return type annotation for public function
    "PT011",  # Missing `match` parameter in `pytest.raises()`
    "S101",   # Use of assert is detected
]

[tool.ruff.lint.isort]
known-first-party = ["md_dataset"]
force-single-line = true
no-lines-before = ["future","standard-library","third-party","first-party","local-folder"]

[tool.bumpversion]
current_version = "0.1.0"

[[tool.bumpversion.files]]
filename = "src/md_dataset/__init__.py"

[[tool.bumpversion.files]]
filename = "pyproject.toml"

[[tool.bumpversion.files]]
filename = "CITATION.cff"

[[tool.bumpversion.files]]
filename = "docs/conf.py"
